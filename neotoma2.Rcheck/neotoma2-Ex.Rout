
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "neotoma2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "neotoma2-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('neotoma2')

Attaching package: ‘neotoma2’

The following object is masked from ‘package:stats’:

    filter

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("author-class")
> ### * author-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: author-class
> ### Title: An S4 class for the authors of a Neotoma publication.
> ### Aliases: author-class
> 
> ### ** Examples
> 
> ## Not run: 
> ##D simon <- new("contact", familyname = "Goring", givennames = "Simon J.")
> ##D firstauthor <- new("author", author = simon, order = 1)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("author-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("authors-class")
> ### * authors-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: authors-class
> ### Title: An S4 class for a set of Neotoma author objects.
> ### Aliases: authors-class
> 
> ### ** Examples
> 
> ## Not run: 
> ##D simon <- new("contact", familyname = "Goring", givennames = "Simon J.")
> ##D socorro <- new("contact", familyname = "Dominguez", givennames = "Socorro")
> ##D first_author <- new("author", author = simon, order = 1)
> ##D second_author <- new("author", author = socorro, order = 2)
> ##D author_list <- new("authors", authors = list(first_author, second_author))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("authors-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("build_dataset")
> ### * build_dataset
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: build_dataset
> ### Title: Build a dataset object from a JSON list representation.
> ### Aliases: build_dataset
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # To build dataset from API call:
> ##D build_dataset(x)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("build_dataset", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("build_sample")
> ### * build_sample
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: build_sample
> ### Title: Build a samples 'data.frame' from Neotoma API JSON
> ### Aliases: build_sample
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # To build sample from API call:
> ##D build_sample(x)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("build_sample", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("build_sites")
> ### * build_sites
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: build_sites
> ### Title: Build a 'site' from the Neotoma API response.
> ### Aliases: build_sites
> 
> ### ** Examples
> 
> ## Not run: 
> ##D response <- jsonlite::fromJSON(
> ##D   "https://api.neotomadb.org/v2.0/data/datasets/100,101",
> ##D   flatten = FALSE, simplifyVector = FALSE)
> ##D response <- cleanNULL(response)
> ##D newSites <- build_sites(response$data)
> ##D newSites
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("build_sites", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("build_specimen")
> ### * build_specimen
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: build_specimen
> ### Title: Build specimen objects.
> ### Aliases: build_specimen
> 
> ### ** Examples
> 
> ## Not run: 
> ##D build_specimen(x)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("build_specimen", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cite_data-site-method")
> ### * cite_data-site-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cite_data,site-method
> ### Title: Obtain data citations from a single record.
> ### Aliases: cite_data,site-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D mb <- get_sites(gpid = "Manitoba", datasettype = "pollen")
> ##D mb_ds <- get_datasets(mb)
> ##D cite_data(mb_ds)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cite_data-site-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cite_data-sites-method")
> ### * cite_data-sites-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cite_data,sites-method
> ### Title: Obtain data citations from multiple records.
> ### Aliases: cite_data,sites-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D mb <- get_sites(gpid = "Manitoba", datasettype = "pollen")
> ##D mb_ds <- get_datasets(mb)
> ##D cite_data(mb_ds)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cite_data-sites-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("clean")
> ### * clean
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: clean
> ### Title: clean Neotoma objects to remove duplicates and empty objects.
> ### Aliases: clean
> 
> ### ** Examples
> 
> ## Not run: 
> ##D clean_sites <- get_sites(sitename = "L%", limit = 20)
> ##D more_sites <- get_sites(sitename = "La%", limit = 20)
> ##D long_set <- c(clean_sites, more_sites)
> ##D length(long_set)
> ##D # By removing duplicates we get a smaller object.
> ##D length(clean(long_set))
> ##D # We can do the same thing with collection units:
> ##D clean_cols <- get_sites(sitename = "L%", limit = 20) %>%
> ##D   collunits()
> ##D more_cols <- get_sites(sitename = "La%", limit = 20) %>%
> ##D   collunits()
> ##D long_set <- c(clean_cols, more_cols)
> ##D length(long_set)
> ##D # By removing duplicates we get a smaller object.
> ##D length(clean(long_set))
> ##D # And datasets:
> ##D clean_ds <- get_sites(sitename = "L%", limit = 20) %>%
> ##D   get_downloads() %>% datasets()
> ##D more_ds <- get_sites(sitename = "La%", limit = 20) %>%
> ##D   get_downloads() %>% datasets()
> ##D long_set <- c(clean_ds, more_ds)
> ##D length(long_set)
> ##D # By removing duplicates we get a smaller object.
> ##D length(clean(long_set))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("clean", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("clean.collunits")
> ### * clean.collunits
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: clean.collunits
> ### Title: clean sites objects to remove duplicates.
> ### Aliases: clean.collunits
> 
> ### ** Examples
> 
> ## Not run: 
> ##D clean_cols <- get_sites(sitename = "L%", limit = 20) %>%
> ##D   collunits()
> ##D more_cols <- get_sites(sitename = "La%", limit = 20) %>%
> ##D   collunits()
> ##D long_set <- c(clean_cols, more_cols)
> ##D length(long_set)
> ##D # By removing duplicates we get a smaller object.
> ##D length(clean(long_set))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("clean.collunits", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("clean.datasets")
> ### * clean.datasets
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: clean.datasets
> ### Title: clean sites objects to remove duplicates.
> ### Aliases: clean.datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D clean_ds <- get_sites(sitename = "L%", limit = 20) %>%
> ##D   get_downloads() %>% datasets()
> ##D more_ds <- get_sites(sitename = "La%", limit = 20) %>%
> ##D   get_downloads() %>% datasets()
> ##D long_set <- c(clean_ds, more_ds)
> ##D length(long_set)
> ##D # By removing duplicates we get a smaller object.
> ##D length(clean(long_set))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("clean.datasets", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("clean.sites")
> ### * clean.sites
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: clean.sites
> ### Title: clean sites objects to remove duplicates.
> ### Aliases: clean.sites
> 
> ### ** Examples
> 
> ## Not run: 
> ##D clean_sites <- get_sites(sitename = "L%", limit = 20)
> ##D more_sites <- get_sites(sitename = "La%", limit = 20)
> ##D long_set <- c(clean_sites, more_sites)
> ##D length(long_set)
> ##D # By removing duplicates we get a smaller object.
> ##D length(clean(long_set))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("clean.sites", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("contact-class")
> ### * contact-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: contact-class
> ### Title: An S4 class for Neotoma contacts
> ### Aliases: contact-class
> 
> ### ** Examples
> 
> ## Not run: 
> ##D new("contact", familyname = "Goring", givennames = "Simon J.")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("contact-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("contacts-class")
> ### * contacts-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: contacts-class
> ### Title: An S4 class for multi-contact information from the Neotoma
> ###   Paleoecology Database.
> ### Aliases: contacts-class
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create two contact objects and associate them within a contacts object.
> ##D simon <- new("contact", familyname = "Goring", givennames = "Simon J.")
> ##D socorro <- new("contact", familyname = "Dominguez", givennames = "Socorro")
> ##D packagers <- new("contacts", contacts = list(simon, socorro))
> ##D packagers
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("contacts-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("doi-site-method")
> ### * doi-site-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: doi,site-method
> ### Title: Obtain dataset DOIs from records.
> ### Aliases: doi,site-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D mb <- get_sites(gpid = "Manitoba", datasettype = "pollen")
> ##D mb_ds <- get_datasets(mb)
> ##D doi(mb_ds)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("doi-site-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("doi-sites-method")
> ### * doi-sites-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: doi,sites-method
> ### Title: Obtain dataset DOIs from records.
> ### Aliases: doi,sites-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D mb <- get_sites(gpid = "Manitoba", datasettype = "pollen")
> ##D mb_ds <- get_datasets(mb)
> ##D doi(mb_ds)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("doi-sites-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("filter.sites")
> ### * filter.sites
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: filter.sites
> ### Title: Apply a filter for Neotoma sites objects.
> ### Aliases: filter.sites
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Download 100 sites, but only keep the sites that are close to sea level.
> ##D some_sites <- get_sites(sitename = "Lake%", limit = 100)
> ##D site_subset <- some_sites %>% filter(altitude < 100)
> ##D # Download 100 sites, get all associated datasets, but keep only
> ##D # sites/datasets that are of datasettype "pollen":
> ##D sites <- get_sites(limit = 100) %>%
> ##D   get_datasets(all_data = TRUE)
> ##D pollen_subset <- sites %>% filter(datasettype == "pollen")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("filter.sites", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_datasets")
> ### * get_datasets
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_datasets
> ### Title: get_datasets
> ### Aliases: get_datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # To find all datasets with a min altitude of 12 and a max altitude of 25:
> ##D sites_12to25 <- get_datasets(altmin=12, altmax=25)
> ##D 
> ##D # To find all datasets in Brazil
> ##D brazil <- '{"type": "Polygon",
> ##D "coordinates": [[
> ##D  [-73.125, -9.102096738726443],
> ##D  [-56.953125,-33.137551192346145],
> ##D  [-36.5625,-7.710991655433217],
> ##D  [-68.203125,13.923403897723347],
> ##D  [-73.125,-9.102096738726443]]]}'
> ##D brazil_datasets <- get_datasets(loc = brazil[1])
> ##D # To obtain the dataset metadata:
> ##D datasets(brazil_datasets)
> ##D # There is insufficient metadata at this point to obtain information
> ##D # about taxa present at the site. We must use get_downloads() to
> ##D # obtain the full set of sample information:
> ##D # This fails: taxa(brazil_datasets)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_datasets", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_datasets.default")
> ### * get_datasets.default
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_datasets.default
> ### Title: Get Dataset Default
> ### Aliases: get_datasets.default
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # To find all datasets with a min altitude of 12 and a max altitude of 25:
> ##D sites_12to25 <- get_datasets(altmin=12, altmax=25)
> ##D 
> ##D # To find all datasets in Brazil
> ##D brazil <- '{"type": "Polygon",
> ##D "coordinates": [[
> ##D  [-73.125, -9.102096738726443],
> ##D  [-56.953125,-33.137551192346145],
> ##D  [-36.5625,-7.710991655433217],
> ##D  [-68.203125,13.923403897723347],
> ##D  [-73.125,-9.102096738726443]]]}'
> ##D brazil_datasets <- get_datasets(loc = brazil[1])
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_datasets.default", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_datasets.numeric")
> ### * get_datasets.numeric
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_datasets.numeric
> ### Title: Get Dataset Numeric
> ### Aliases: get_datasets.numeric
> 
> ### ** Examples
> 
> ## Not run: 
> ##D allds <- get_datasets(1:29)
> ##D plotLeaflet(allds)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_datasets.numeric", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_datasets.sites")
> ### * get_datasets.sites
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_datasets.sites
> ### Title: Get Dataset from a 'sites' object.
> ### Aliases: get_datasets.sites
> 
> ### ** Examples
> 
> ## Not run: 
> ##D random_sites <- get_sites(1:100)
> ##D allds <- get_datasets(random_sites)
> ##D plotLeaflet(allds)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_datasets.sites", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_downloads")
> ### * get_downloads
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_downloads
> ### Title: get_downloads
> ### Aliases: get_downloads
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # To find the downloads object of dataset 24:
> ##D downloads24 <- get_downloads(24)
> ##D 
> ##D # To find all downloads in Brazil
> ##D brazil <- '{"type": "Polygon",
> ##D "coordinates": [[
> ##D  [-73.125, -9.102096738726443],
> ##D  [-56.953125,-33.137551192346145],
> ##D  [-36.5625,-7.710991655433217],
> ##D  [-68.203125,13.923403897723347],
> ##D  [-73.125,-9.102096738726443]]]}'
> ##D brazil_datasets <- get_datasets(loc = brazil[1])
> ##D brazil_downloads <- get_downloads(brazil_datasets)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_downloads", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_manual")
> ### * get_manual
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_manual
> ### Title: get_manual
> ### Aliases: get_manual
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # This call does not work from `source()` calls or in testing.
> ##D # interactive() just lets us know you are interacting with the console:
> ##D if (interactive()) {
> ##D  get_manual()
> ##D }
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_manual", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_publications")
> ### * get_publications
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_publications
> ### Title: Get publication information for Neotoma records
> ### Aliases: get_publications
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # How old are the papers in Neotoma that include the term "mammut"?
> ##D mammoth_papers <- get_publications(search="mammut") %>%
> ##D   as.data.frame()
> ##D hist(as.numeric(mammoth_papers$year))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_publications", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_publications.default")
> ### * get_publications.default
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_publications.default
> ### Title: Get publication information from Neotoma
> ### Aliases: get_publications.default
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # How old are the papers in Neotoma that include the term "mammut"?
> ##D mammoth_papers <- get_publications(search="mammut") %>%
> ##D   as.data.frame()
> ##D hist(as.numeric(mammoth_papers$year))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_publications.default", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_publications.numeric")
> ### * get_publications.numeric
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_publications.numeric
> ### Title: Get publications using their unique identifier.
> ### Aliases: get_publications.numeric
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # We want the paper identified in Neotoma as 666:
> ##D get_publications(666)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_publications.numeric", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_publications.publication")
> ### * get_publications.publication
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_publications.publication
> ### Title: Update information for a publications object.
> ### Aliases: get_publications.publication
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Take a publication object and purposely degrade the metadata:
> ##D bad_pub <- get_publications(666)
> ##D # Note this only changes the reported year, not the citation string.
> ##D bad_pub[[1]]@year <- "1923"
> ##D bad_pub[[1]]@publicationid <- as.character(NA)
> ##D updated_pubs <- get_publications(bad_pub[[1]])
> ##D attr(updated_pubs, "matches")
> ##D # we see the proper citation in the record:
> ##D updated_pubs <- attr(updated_pubs, "matches")[[3]]
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_publications.publication", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_publications.publications")
> ### * get_publications.publications
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_publications.publications
> ### Title: Update metadata for a set of publication objects.
> ### Aliases: get_publications.publications
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Take a publication object and purposely degrade the metadata:
> ##D bad_pub <- get_publications(c(666, 667, 668))
> ##D # Note this only changes the reported year, not the citation string.
> ##D bad_pub[[1]]@year <- "1923"
> ##D bad_pub[[1]]@publicationid <- as.character(NA)
> ##D updated_pubs <- get_publications(bad_pub)
> ##D # Only the first publication object has any matches. It's the only one
> ##D # that is missing its publicaitonid.
> ##D attr(updated_pubs[[1]], "matches")
> ##D attr(updated_pubs[[2]], "matches")
> ##D # we see the proper citation in the record:
> ##D updated_pubs[[1]] <- attr(updated_pubs[[1]], "matches")[[1]]
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_publications.publications", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_sites")
> ### * get_sites
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_sites
> ### Title: get_sites
> ### Aliases: get_sites
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Find all sites with a min altitude of 12m and a max altitude of 25m
> ##D ## By default returns only 25 sites (default limit is 25):
> ##D sites_12to25 <- get_sites(altmin=12, altmax=25)
> ##D ## Return all sites, using a minimum altitude of 2500m (returns >500 sites):
> ##D sites_2500 <- get_sites(altmin=2500, all_data = TRUE)
> ##D ## To find all sites that contain the string "Alex%"
> ##D alex_sites <- get_sites(sitename="Alex%")
> ##D 
> ##D ## To find sites in Brazil (again with default 25 records)
> ##D brazil <- '{"type": "Polygon",
> ##D "coordinates": [[
> ##D  [-73.125, -9.102096738726443],
> ##D  [-56.953125,-33.137551192346145],
> ##D  [-36.5625,-7.710991655433217],
> ##D  [-68.203125,13.923403897723347],
> ##D  [-73.125,-9.102096738726443]]]}'
> ##D brazil_sites <- get_sites(loc = brazil[1])
> ##D 
> ##D # Finding all sites with Liliaceae pollen in 1000 year bins:
> ##D lilysites <- c()
> ##D for (i in seq(0, 10000, by = 1000)) {
> ##D   lily <- get_sites(taxa=c("Liliaceae"),
> ##D                     ageyoung = i - 500,
> ##D                     ageold = i + 500,
> ##D                     all_data = TRUE)
> ##D   lilysites <- c(lilysites, length(lily))
> ##D }
> ##D plot(x = seq(0, 10000, by = 1000), y = lilysites, type = 'b')
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_sites", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_sites.numeric")
> ### * get_sites.numeric
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_sites.numeric
> ### Title: Get Site Information for Fossil Sites
> ### Aliases: get_sites.numeric
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Find all sites by numeric siteid:
> ##D sites <- get_sites(seq(1,100))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_sites.numeric", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_sites.sites")
> ### * get_sites.sites
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_sites.sites
> ### Title: Get Site Information for Fossil Sites from a Set of Sites
> ### Aliases: get_sites.sites
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Find all sites using a set of prior sites:
> ##D char_sites <- get_sites(taxa = "charcoal")
> ##D pollen_coloc <- get_sites(char_sites, datasettype = "pollen")
> ##D char_coloc <- char_sites %>% filter(siteid %in% getids(pollen_coloc)$siteid)
> ##D pol_char <- c(pollen_coloc, char_coloc) %>% clean()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_sites.sites", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_specimens")
> ### * get_specimens
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_specimens
> ### Title: get_specimens
> ### Aliases: get_specimens
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # To find specimen with ID 19832:
> ##D my_specimens <- get_specimens(19832)
> ## End(Not run)
> # To find specimens in datasetid 41610
> my_specimens2 <- get_specimens(datasetid = 41610)
.> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_specimens", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_table")
> ### * get_table
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_table
> ### Title: Get table record from Neotoma
> ### Aliases: get_table
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Returns only the first 25 specimen records.
> ##D someSpec <- get_table('specimens')
> ##D # Loop with the offset to get all specimens:
> ##D okay <- TRUE
> ##D counter <- 1
> ##D specimens <- list()
> ##D while(okay) {
> ##D   specimens[[counter]] <- get_table('specimens', offset = (counter - 1) * 25)
> ##D   if(nrow(specimens[[counter]]) < 25) {
> ##D     okay <- FALSE
> ##D   } else {
> ##D     counter <- counter + 1
> ##D   }
> ##D }
> ##D specimens <- specimens %>% dplyr::bind_rows()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_table", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getids.collunit")
> ### * getids.collunit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getids.collunit
> ### Title: Get object IDs from a single collectionunit.
> ### Aliases: getids.collunit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D marion <- get_sites(sitename = "Marion Lake") %>%
> ##D   get_datasets() %>%
> ##D   filter(datasettype == "pollen") %>%
> ##D   get_downloads()
> ##D collunitids <- getids(collunits(marion)[[1]])
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getids.collunit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getids.collunits")
> ### * getids.collunits
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getids.collunits
> ### Title: Get object IDs from collectionunits.
> ### Aliases: getids.collunits
> 
> ### ** Examples
> 
> ## Not run: 
> ##D marion <- get_sites(sitename = "Marion Lake") %>%
> ##D   get_datasets() %>%
> ##D   filter(datasettype == "pollen") %>%
> ##D   get_downloads()
> ##D collunitids <- getids(collunits(marion))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getids.collunits", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pingNeotoma")
> ### * pingNeotoma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pingNeotoma
> ### Title: pingNeotoma
> ### Aliases: pingNeotoma
> 
> ### ** Examples
> 
> ## Not run: 
> ##D test_connection <- pingNeotoma("neotoma")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pingNeotoma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotLeaflet-site-method")
> ### * plotLeaflet-site-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotLeaflet,site-method
> ### Title: plotLeaflet
> ### Aliases: plotLeaflet,site-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D modernSites <- get_sites(keyword = "Modern")
> ##D plotLeaflet(modernSites[[1]])
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotLeaflet-site-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotLeaflet-sites-method")
> ### * plotLeaflet-sites-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotLeaflet,sites-method
> ### Title: plotLeaflet
> ### Aliases: plotLeaflet,sites-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Note that by default the limit for queries is 25 records:
> ##D modernSites <- get_sites(keyword = "Modern")
> ##D plotLeaflet(modernSites)
> ##D # Save map to file:
> ##D plotLeaflet(modernSites, save_im = '/tmp/myMap.png')
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotLeaflet-sites-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("publication-class")
> ### * publication-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: publication-class
> ### Title: An S4 class for a single Neotoma publication.
> ### Aliases: publication-class
> 
> ### ** Examples
> 
> ## Not run: 
> ##D simon <- new("contact", familyname = "Goring", givennames = "Simon J.")
> ##D socorro <- new("contact", familyname = "Dominguez", givennames = "Socorro")
> ##D first_author <- new("author", author = simon, order = 1)
> ##D second_author <- new("author", author = socorro, order = 2)
> ##D author_list <- new("authors", authors = list(first_author, second_author))
> ##D pub <- new("publication",
> ##D            articletitle = "Top or bottom: Best toast spreading surfaces.",
> ##D            journal = "Peanut Butter Science",
> ##D            year = "2022",
> ##D            volume = "2",
> ##D            author = author_list)
> ##D            
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("publication-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("samples-collunit-method")
> ### * samples-collunit-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: samples,collunit-method
> ### Title: samples
> ### Aliases: samples,collunit-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D marion <- get_sites(sitename = "Marion Lake") %>%
> ##D   get_datasets() %>%
> ##D   filter(datasettype == "pollen") %>%
> ##D   get_downloads()
> ##D pollen <- samples(collunits(marion)[[1]])
> ##D plot(value ~ I(-1 * age),
> ##D      data = pollen[pollen$variablename == "Cupressaceae",],
> ##D xlab = "Years before present",
> ##D ylab = "Cupressaceae pollen count")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("samples-collunit-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("samples-collunits-method")
> ### * samples-collunits-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: samples,collunits-method
> ### Title: Get samples from a collectionunit or set of collection units:
> ### Aliases: samples,collunits-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D marion <- get_sites(sitename = "Marion Lake") %>%
> ##D   get_datasets() %>%
> ##D   filter(datasettype == "pollen") %>%
> ##D   get_downloads()
> ##D pollen <- samples(collunits(marion))
> ##D plot(value ~ I(-1 * age),
> ##D      data = pollen[pollen$variablename == "Cupressaceae",],
> ##D xlab = "Years before present",
> ##D ylab = "Cupressaceae pollen count")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("samples-collunits-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("samples-site-method")
> ### * samples-site-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: samples,site-method
> ### Title: samples
> ### Aliases: samples,site-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D marion <- get_sites(sitename = "Marion Lake") %>%
> ##D   get_datasets() %>%
> ##D   filter(datasettype == "pollen") %>%
> ##D   get_downloads()
> ##D pollen <- samples(marion)
> ##D plot(value ~ I(-1 * age), 
> ##D      data = pollen[pollen$variablename == "Cupressaceae",],
> ##D xlab = "Years before present",
> ##D ylab = "Cupressaceae pollen count")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("samples-site-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("samples-sites-method")
> ### * samples-sites-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: samples,sites-method
> ### Title: samples
> ### Aliases: samples,sites-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D marion <- get_sites(sitename = "Marion Lake") %>%
> ##D   get_datasets() %>%
> ##D   filter(datasettype == "pollen") %>%
> ##D   get_downloads()
> ##D pollen <- samples(marion)
> ##D plot(value ~ I(-1 * age),
> ##D      data = pollen[pollen$variablename == "Cupressaceae",],
> ##D xlab = "Years before present",
> ##D ylab = "Cupressaceae pollen count")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("samples-sites-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("set_chronology")
> ### * set_chronology
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: set_chronology
> ### Title: set chronology information for a new record.
> ### Aliases: set_chronology
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create a site called "My Lake", to
> ##D x = st_as_sf(st_sfc(st_point(c(5,5))))
> ##D my_site <- set_site(sitename = "My Lake",
> ##D                     geography = x,
> ##D                     description = "my lake",
> ##D                     altitude = 30)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("set_chronology", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("set_collunit")
> ### * set_collunit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: set_collunit
> ### Title: set Site Information for Fossil Sites
> ### Aliases: set_collunit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create a dataset
> ##D my_dataset <- set_dataset(database = "EPD",
> ##D                     datsettype = "pollen",
> ##D                     notes = "my lake"0)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("set_collunit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("set_dataset")
> ### * set_dataset
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: set_dataset
> ### Title: set Site Information for Fossil Sites
> ### Aliases: set_dataset
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create a dataset
> ##D my_dataset <- set_dataset(database = "EPD",
> ##D                     datsettype = "pollen",
> ##D                     notes = "my lake"0)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("set_dataset", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("set_sample")
> ### * set_sample
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: set_sample
> ### Title: set Sample Information
> ### Aliases: set_sample
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create a site called "My Lake", to
> ##D x = st_as_sf(st_sfc(st_point(c(5,5))))
> ##D my_site <- set_site(sitename = "My Lake",
> ##D                     geography = x,
> ##D                     description = "my lake",
> ##D                     altitude = 30)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("set_sample", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("set_server")
> ### * set_server
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: set_server
> ### Title: Set Neotoma API Source or Server
> ### Aliases: set_server
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # The user is running the API locally using the node/express API
> ##D # cloned from github: https://github.com/NeotomaDB/api_nodetest
> ##D set_server(server = "local")
> ##D # The user switches back to the remote api server.
> ##D set_server(server = "neotoma")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("set_server", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("set_site")
> ### * set_site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: set_site
> ### Title: set Site Information for Fossil Sites
> ### Aliases: set_site
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create a site called "My Lake", to
> ##D x = st_as_sf(st_sfc(st_point(c(5,5))))
> ##D my_site <- set_site(sitename = "My Lake",
> ##D                     geography = x,
> ##D                     description = "my lake",
> ##D                     altitude = 30)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("set_site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("show-site-method")
> ### * show-site-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: show,site-method
> ### Title: Show a site object as a dataframe
> ### Aliases: show,site-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D some_site <- get_sites(sitename = "Site%")
> ##D as.data.frame(some_site[[1]])
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("show-site-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("show-sites-method")
> ### * show-sites-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: show,sites-method
> ### Title: Show sites objects as a dataframe
> ### Aliases: show,sites-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D some_site <- get_sites(sitename = "Site%")
> ##D as.data.frame(some_site)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("show-sites-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("specimens-sites-method")
> ### * specimens-sites-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: specimens,sites-method
> ### Title: specimens
> ### Aliases: specimens,sites-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # To return a specimens table do:
> ##D my_specimens <- get_specimens(19832)
> ##D my_tbl <- specimens(my_specimens)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("specimens-sites-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sub-sites-numeric-ANY-method")
> ### * sub-sites-numeric-ANY-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: [,sites,numeric,ANY-method
> ### Title: Get or remove sites by numeric index
> ### Aliases: [,sites,numeric,ANY-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D some_site <- get_sites(sitename = "Site%")
> ##D some_site[2]
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sub-sites-numeric-ANY-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sub-sub-sites-numeric-ANY-method")
> ### * sub-sub-sites-numeric-ANY-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: [[,sites,numeric,ANY-method
> ### Title: Slicer
> ### Aliases: [[,sites,numeric,ANY-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D some_site <- get_sites(sitename = "Site%")
> ##D some_site[[2]]
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sub-sub-sites-numeric-ANY-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("taxa-site-method")
> ### * taxa-site-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: taxa,site-method
> ### Title: Extract taxonomic data from a single site.
> ### Aliases: taxa,site-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D somesites <- get_sites(datasettype = "pollen", limit = 3) %>%
> ##D   get_downloads()
> ##D diatomtaxa <- taxa(somesites[[1]])
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("taxa-site-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("taxa-sites-method")
> ### * taxa-sites-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: taxa,sites-method
> ### Title: Extract taxonomic data from a set of sites.
> ### Aliases: taxa,sites-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D somesites <- get_sites(datasettype = "diatom", limit = 3) %>%
> ##D   get_downloads()
> ##D diatomtaxa <- taxa(somesites)
> ##D common_taxa <- diatomtaxa %>%
> ##D   dplyr::filter(sites == 3)
> ##D   
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("taxa-sites-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("testNull")
> ### * testNull
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: testNull
> ### Title: Clear NULL values and replace with value predefined value.
> ### Aliases: testNull
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Passing a null value into the function returns 12:
> ##D a <- testNull(val = NULL, out = 12)
> ##D # Passing a non-NULL value returns that value:
> ##D b <- testNull(val = 11, out = 12)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("testNull", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("toJSON-sites-method")
> ### * toJSON-sites-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: toJSON,sites-method
> ### Title: toJSON
> ### Aliases: toJSON,sites-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # To find all sites that contain the string "Alex%"
> ##D alex.sites <- get_sites(sitename="Alex%")
> ##D Convert the object to json
> ##D toJSON(alex.sites)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("toJSON-sites-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("toWide")
> ### * toWide
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: toWide
> ### Title: toWide
> ### Aliases: toWide
> 
> ### ** Examples
> 
> ## Not run: 
> ##D fourcorners <- '{"type": "Polygon",
> ##D "coordinates": [[
> ##D [-109.36060497194846, 37.69552879956651],
> ##D [-107.813845732192, 37.69552879956651],
> ##D [-107.813845732192, 36.80303716260222],
> ##D [-109.36060497194846, 36.80303716260222], 
> ##D [-109.36060497194846, 37.69552879956651]
> ##D ]]}'
> ##D 
> ##D Download all vertebrate localities within a bounding box.
> ##D fc_sites <- neotoma2::get_sites(loc = fourcorners[1])
> ##D fc_ds <- neotoma2::get_datasets(fc_sites, all_data=TRUE) %>% 
> ##D neotoma2::filter(datasettype=="vertebrate fauna")
> ##D 
> ##D fc_dl <- neotoma2::get_downloads(fc_ds)
> ##D fc_dl1 <- fc_dl[[1]]
> ##D 
> ##D fc_smp <- samples(fc_dl1)
> ##D toWide(fc_smp, ecologicalgroups=c('AVES', 'RODE'), 
> ##D elementtypes='bone/tooth', unit='present/absent')
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("toWide", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  18.294 0.503 20.794 0.003 0.005 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
